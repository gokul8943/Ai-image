import React, { useEffect, useState } from 'react';
import Card from '../components/Card';
import FormField from '../components/FormField';
import Loader from '../components/Loader';


// Types
interface Post {
  _id: string;
  name: string;
  prompt: string;
  photo: string;
  // Add other properties as needed
}

interface RenderCardsProps {
  data: Post[] | null;
  title: string;
}

// RenderCards Component
const RenderCards: React.FC<RenderCardsProps> = ({ data, title }) => {
  if (data?.length > 0) {
    return (
      <>
        {data.map((post) => (
          <Card key={post._id} {...post} />
        ))}
      </>
    );
  }
  return (
    <h2 className="mt-5 font-bold text-primary text-xl uppercase animate-fade-in">
      {title}
    </h2>
  );
};

const Home: React.FC = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [allPosts, setAllPosts] = useState<Post[] | null>(null);
  const [searchText, setSearchText] = useState<string>('');
  const [searchTimeout, setSearchTimeout] = useState<NodeJS.Timeout | null>(null);
  const [searchedResults, setSearchedResults] = useState<Post[] | null>(null);

  const fetchPosts = async (): Promise<void> => {
    setLoading(true);
    try {
      const response = await fetch('https://dalle-arbb.onrender.com/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err instanceof Error ? err.message : 'Error fetching posts');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    if (searchTimeout) clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        if (allPosts) {
          const searchResult = allPosts.filter(
            (item) => 
              item.name.toLowerCase().includes(e.target.value.toLowerCase()) || 
              item.prompt.toLowerCase().includes(e.target.value.toLowerCase())
          );
          setSearchedResults(searchResult);
        }
      }, 500)
    );
  };

  return (
    <section className="min-h-screen bg-gradient-to-b from-gray-50 to-white py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="space-y-4 text-center sm:text-left">
          <h1 className="font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-purple-600 text-4xl sm:text-5xl lg:text-6xl tracking-tight">
            The Community Showcase
          </h1>
          <p className="text-gray-600 text-lg sm:text-xl max-w-2xl">
            Browse through a collection of imaginative and visually stunning images generated by DALL-E AI
          </p>
        </div>

        <div className="mt-12">
          <div className="bg-white rounded-2xl shadow-lg p-6 backdrop-blur-sm bg-opacity-90">
            <FormField
              labelName="Search posts"
              type="text"
              name="text"
              placeholder="Search something..."
              value={searchText}
              handleChange={handleSearchChange}
            />
          </div>
        </div>

        <div className="mt-16">
          {loading ? (
            <div className="flex justify-center items-center min-h-[200px]">
              <Loader />
            </div>
          ) : (
            <div className="space-y-8">
              {searchText && (
                <h2 className="font-medium text-gray-600 text-xl">
                  Showing results for{' '}
                  <span className="text-indigo-600 font-semibold">
                    {searchText}
                  </span>
                </h2>
              )}
              
              <div className="grid grid-cols-1 xs:grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-6">
                {searchText ? (
                  <RenderCards
                    data={searchedResults}
                    title="No Search Results Found"
                  />
                ) : (
                  <RenderCards
                    data={allPosts}
                    title="No Posts Found"
                  />
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};

export default Home;